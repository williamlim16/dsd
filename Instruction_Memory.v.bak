`include "Parameter.v"
// fpga4student.com 
// FPGA projects, VHDL projects, Verilog projects 
// Verilog code for RISC Processor 
// Verilog code for Instruction Memory
module Instruction_Memory(
 input[15:0] pc,
 output[15:0] instruction
);

 reg [`col - 1:0] memory [`row_i - 1:0];
 wire [3 : 0] rom_addr = pc[4 : 1];
 
 initial
 begin
	memory[0] = 16'b0000010000000000; //load R0 <- Mem(R2 + 0)
	memory[1] = 16'b0000010001000001; //load R1 <- Mem(R2 + 1)
	memory[2] = 16'b0010000001010000; //Add R2 <- R0 + R1
	memory[3] =	16'b0001001010000000; //Store Mem(R1 + 0) <- R2
	memory[4] = 16'b0011000001010000; //sub R2 <- R0 - R1
	memory[5] = 16'b0100000001010000; //invert R2 <- !R0 
	memory[6] = 16'b0101000001010000; //logical shift left R2 <- R0<<R1 
	memory[7] =	16'b0110000001010000; //logical shift right R2 <- R0>>R1 
	memory[8] = 16'b0111000001010000; //AND R2<- R0 AND R1 
	memory[9] = 16'b1000000001010000; //OR R2<- R0 OR R1 
	memory[10] = 16'b1001000001010000; //SLT R2 <- 1 if R0 < R1 
	memory[11] = 16'b0010000000000000; //Add R0 <- R0 + R0
	memory[12] = 16'b1011000001000001; //BEQ branch to jump if R0=R1, PCnew= PC+2+offset<<1 = 28 => offset = 1
	memory[13] = 16'b1100000001000000; //BNE branch to jump if R0!=R1, PCnew= PC+2+offset<<1 = 28 => offset = 0
	memory[14] = 16'b1101000000000000; //J jump to the beginning address
 end

 assign instruction =  memory[rom_addr]; 

endmodule